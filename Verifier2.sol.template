// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract PairingTest {

    // A
    uint256 constant aG1_x =
        $aG1_x;
    uint256 constant aG1_y =
        $aG1_y;

    // A + alpha
    uint256 constant aAlphaG1_x =
        $aAlphaG1_x;
    uint256 constant aAlphaG1_y =
        $aAlphaG1_y;

    // B
    uint256 constant bG2_x1 =
        $bG2_x1;
    uint256 constant bG2_x2 =
        $bG2_x2;
    uint256 constant bG2_y1 =
        $bG2_y1;
    uint256 constant bG2_y2 =
        $bG2_y2;

    // B + beta
    uint256 constant bBetaG2_x1 =
        $bBetaG2_x1;
    uint256 constant bBetaG2_x2 =
        $bBetaG2_x2;
    uint256 constant bBetaG2_y1 =
        $bBetaG2_y1;
    uint256 constant bBetaG2_y2 =
        $bBetaG2_y2;

    // alpha
    uint256 constant alphaG1_x =
        $alphaG1_x;
    uint256 constant alphaG1_y =
        $alphaG1_y;

    // beta
    uint256 constant betaG2_x1 =
        $betaG2_x1;
    uint256 constant betaG2_x2 =
        $betaG2_x2;
    uint256 constant betaG2_y1 =
        $betaG2_y1;
    uint256 constant betaG2_y2 =
        $betaG2_y2;

    uint256 constant cG1_x =
        $cG1_x;
    uint256 constant cG1_y =
        $cG1_y;

    uint256 constant Q =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    uint256 constant G2_x1 = 
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant G2_x2 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant G2_y1 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant G2_y2 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;

    struct G1Point {
        uint256 x;
        uint256 y;
    }

    function negate(G1Point memory p) internal pure returns (G1Point memory) {
        // The prime q in the base field F_q for G1
        if (p.x == 0 && p.y == 0) return G1Point(0, 0);
        return G1Point(p.x, Q - (p.y % Q));
    }

    function add(
        G1Point memory p1,
        G1Point memory p2
    ) public view returns (G1Point memory r) {
        (bool ok, bytes memory result) = address(6).staticcall(
            abi.encode(p1.x, p1.y, p2.x, p2.y)
        );
        require(ok, "g1add failed");
        (uint256 x, uint256 y) = abi.decode(result, (uint256, uint256));
        r = G1Point(x, y);
    }

    function run(bytes memory input) public view returns (bool) {
        // optional, the precompile checks this too and reverts (with no error) if false, this helps narrow down possible errors
        if (input.length % 192 != 0) revert("Points must be a multiple of 6");
        (bool success, bytes memory data) = address(0x08).staticcall(input);
        if (success) return abi.decode(data, (bool));
        revert("Wrong pairing");
    }

    function verify() public view returns (bool) {
        // -(A + aplha) * (B + beta) + alpha * beta + C + beta * A + aplha * B = 0
        bytes memory points1 = abi.encode(
            aAlphaG1_x,
            negate(G1Point(aAlphaG1_x, aAlphaG1_y)).y,
            bBetaG2_x2,
            bBetaG2_x1,
            bBetaG2_y2,
            bBetaG2_y1,
            alphaG1_x,
            alphaG1_y,
            betaG2_x2,
            betaG2_x1,
            betaG2_y2,
            betaG2_y1
        );

        bytes memory points2 = abi.encode(
            cG1_x,
            cG1_y,
            G2_x2,
            G2_x1,
            G2_y2,
            G2_y1,
            aG1_x,
            aG1_y,
            betaG2_x2,
            betaG2_x1,
            betaG2_y2,
            betaG2_y1,
        );

        bytes memory points3 = abi.encode(
            alphaG1_x,
            alphaG1_y,
            bG2_x2,
            bG2_x1,
            bG2_y2,
            bG2_y1
        );

        bytes memory points = abi.encodePacked(points1, points2, points3);

        bool x = run(points);
        return x;
    }
}
